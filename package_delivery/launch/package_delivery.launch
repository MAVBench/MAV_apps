<launch>
  <!-- args and params --> 
  <!-- Behzad's workstation ip --> 
  <!-- arg name="host_ip" default="10.157.90.51" /-->
  <!--arg name="host_ip" default="169.254.153.158" /-->
  <!-- Hasans's workstation ip --> 
  <!-- arg name="host_ip" default="10.157.90.49" /-->
  <!-- Hasans's direct connection ip --> 
  <arg name="host_ip" default="10.16.0.172" />
  <!--Wenzhi's workstation ip-->
  <!--arg name="host_ip" default="10.157.90.62" /-->
  <!-- Sri's workstation ip --> 
  <!--arg name="host_ip" default="10.157.90.132" /-->
  <param name="ip_addr" value="$(arg host_ip)" />

  <!-- Drone's physical characteristics /-->
  <arg name="a_max" default="2"/> 
  <arg name="v_max" default="1.0"/> 
  <param name="future_col_drone_radius" value="1.5"/>
  <param name="future_col_drone_height" value="0.6"/>
  <arg name="planner_drone_radius" default="2"/>
  <arg name="planner_drone_height" default="0.6"/>
  
  <arg name="planning_resolution" default=".85"/>
  <arg name="sensor_max_range" default="30" />
  <arg name="fly_trajectory_time_out" default=".01"/> 
  <arg name="planning_budget" default="9"/>
  <param name="planning_budget" value="$(arg planning_budget)"/>


  <arg name="max_yaw_rate" default="90"/>
  <arg name="max_yaw_rate_during_flight" default="90"/>
  <param name="v_max" value="$(arg v_max)"/>
  <param name="a_max" value="$(arg a_max)"/>
  <param name="max_yaw_rate" value="$(arg max_yaw_rate)"/>
  <param name="max_yaw_rate_during_flight" value="$(arg max_yaw_rate_during_flight)"/>
  <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/> 

  
  <!-- sensors /-->
  <arg name="all_front" default="true"/>	

  <!-- Set the localization method /-->
  <!--arg name="localization_method" default="vins_mono" /-->
  <!--arg name="localization_method" default="gps" /-->
  <arg name="localization_method" default="ground_truth" />

  <param name="localization_method" value="$(arg localization_method)" />

  <!-- stat file-->
  <param name="stats_file_addr" value="$(find package_delivery)/../data/package_delivery/stats.json" />
  <param name="supervisor_mailbox" value="$(find package_delivery)/../data/package_delivery/supervisor_mailbox.txt" />

  <!-- setting DEBUG to false prevents publishing and subscribing to rviz /--> 
  <!-- also planning to prevent stdio stuff(if they really matter)-->
  <arg name="DEBUG" default="true" />
  <arg name="CLCT_DATA" value="true" />
  <param name="ros_DEBUG" type="bool" value="$(arg DEBUG)" />
  <param name="DEBUG"  value="$(arg DEBUG)" />
  <param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>

  
  <group if="$(arg CLCT_DATA)">
  <param name="enable_statistics" value="true"/>
  </group> 

  <!-- only for to octomap and pt cloud--> 
  <arg name="data_collection_iteration_freq" value="150" />
  <param name="data_collection_iteration_freq_ptCld" value="$(eval 5*arg('data_collection_iteration_freq'))"/>


  <!-- launch prefixes -->

  <comment>
    <!-- Octomap -->
    <node pkg="nodelet" type="nodelet" name="octomap_server_nodelet" args="load octomap_server/OctomapServerNodelet depth_transforms_manager" output="screen">
	<!-- node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen"-->
        <param name="resolution" value="$(arg planning_resolution)" />
	
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg sensor_max_range)"/>
		<param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>
        <param name="data_collection_iteration_freq_OM" value="$(arg data_collection_iteration_freq)"/>
        
        <!-- data source to integrate (PointCloud2) -->
		<!-- remap from="cloud_in" to="/points" / -->

		<!-- Filter ground for binary occupancy map -->
		<param name="base_frame_id" value="world" />
		<!-- <param name="filter_ground" value="true" />
		<param name="ground_filter_plane_distance" value="1.00" />
		<param name="ground_filter/distance" value="0.50" /> -->
	    <param name="pointcloud_min_z" type="double" value="-2.0" />
	    <param name="pointcloud_max_z" type="double" value="100.0" />
	    <param name="occupancy_min_z" type="double" value="-2.00" />
	    <param name="occupancy_max_z" type="double" value="100.0" />
		<!-- <param name="ground_filter_plane_distance" value="0.07" />
		<param name="ground_filter/distance" value="0.04" />
		<param name="ground_filter/angle" value="0.4" /> -->
	</node>
  </comment>

  <comment>
	<node pkg="octomap_world" type="octomap_manager" name="octomap_manager">
       <remap from="cam0/camera_info" to="/Airsim/left/camera_info"/>
       <remap from="cam1/camera_info" to="/Airsim/right/camera_info"/>
	   <remap from="pointcloud" to="/points" />
       <remap from="disparity" to="/Airsim/disparity"/> 
       <param name="resolution" value="0.5"/>
       <!--param name="octomap_file" value=""/-->
    </node>
  </comment>

    <comment> 
    <node pkg="package_delivery" type="panic_pcl" name="panic_pcl" output="screen">
		<param name="panic_distance" value=".1"/>
    </node>
    </comment>
    
    <!-- node pkg="package_delivery" type="future_collision" name="future_collision" output="screen" -->
	<!-- node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen"-->
    <!--group ns="occupancy_map_node"-->
    <node pkg="package_delivery" type="occupancy_map_node" name="occupancy_map_node" output="screen"> 
        <param name="resolution" value="$(arg planning_resolution)" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg sensor_max_range)"/>
		<param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>
        <param name="data_collection_iteration_freq_OM" value="$(arg data_collection_iteration_freq)"/>
        
        <!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/points" />

		<!-- Filter ground for binary occupancy map -->
		<param name="base_frame_id" value="world" />
		<!-- <param name="filter_ground" value="true" />
		<param name="ground_filter_plane_distance" value="1.00" />
		<param name="ground_filter/distance" value="0.50" /> -->
	    <param name="pointcloud_min_z" type="double" value="-2.0" />
	    <param name="pointcloud_max_z" type="double" value="100.0" />
	    <param name="occupancy_min_z" type="double" value="-2.00" />
	    <param name="occupancy_max_z" type="double" value="100.0" />
		<!-- <param name="ground_filter_plane_distance" value="0.07" />
		<param name="ground_filter/distance" value="0.04" />
		<param name="ground_filter/angle" value="0.4" /> -->

        <param name="latch" value="false" />
    </node>
    <!--/group-->
    
    <?ignore 
    <!-- Convert to point cloud -->
	<node pkg="package_delivery" type="panic" name="panic">
		<remap from="depth_img" to="/Airsim/depth_2"/>
		<!-- remap from="depth_img" to="/stereo/left/image_raw"/ -->
    </node>
    ?>

    <node pkg="follow_trajectory" type="follow_trajectory" name="follow_trajectory" output="screen">
        <!-- param name="yaw_t" value=".75"/ -->
        <param name="ip_addr" value="$(arg host_ip)"/>
        <param name="localization_method" type="string" value="$(arg localization_method)"/>
        <param name="grace_period" type="double" value="0.0" />
        <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/>
    </node>
1


	<!-- Path-Planner -->
	<group ns="motion_planner">
		<param name="nodes_to_add_to_roadmap" value="300"/>
		<param name="max_dist_to_connect_at" value="10"/>

		<param name="v_max" value="$(arg v_max)"/>
		<param name="a_max" value="$(arg a_max)"/>
        <param name="drone_radius" value="$(arg planner_drone_radius)"/>
        <param name="drone_height" value="$(arg planner_drone_height)"/>

		<param name="max_roadmap_size" value="1600"/>

        <param name="rrt_step_size" value="1.0"/>
        <param name="rrt_bias" value="10"/>
		
        <param name="x_dist_to_sample_from__low_bound" value="-50"/>
		<param name="x_dist_to_sample_from__high_bound" value="50"/>
        <param name="y_dist_to_sample_from__low_bound" value="-5"/>
        <param name="y_dist_to_sample_from__high_bound" value="100"/>
        <param name="z_dist_to_sample_from__low_bound" value="3"/>
        <param name="z_dist_to_sample_from__high_bound" value="7"/>

        <param name="sampling_interval" value="0.5"/>

        <!-- options for motion_planning core --> 
        <!-- param name="motion_planning_core" value="PRM"/-->
        <!-- param name="motion_planning_core" value="RRT"/-->
        <!-- param name="motion_planning_core" value="OMPL-RRT"/-->
        <param name="motion_planning_core" value="OMPL-RRTConnect"/>
        <!-- param name="motion_planning_core" value="OMPL-RRT"/-->
	<!-- /node -->
    </group>

	<!-- Demo program that controls drone -->
	<!-- <node pkg="package_delivery" type="package_delivery" name="package_delivery" output="screen" launch-prefix="/home/nvidia/install/perf/perf record -g fp"> -->
	<node pkg="package_delivery" type="package_delivery" name="package_delivery" output="screen">
        <param name="ip_addr" value="$(arg host_ip)"/>
        <!-- param name="issue_cmd__time_step" value=".05"/-->
		<!-- param name="points_to_replan_after" value="1000000000"/-->
        <param name="v_max" value="$(arg v_max)"/>
		<param name="a_max" value="$(arg a_max)"/>
        <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/>
        <!-- Localization of the depth images -->
        <param name="localization_method" value="$(arg localization_method)" />
    </node>

  <group if="$(eval localization_method == 'gps')">
     <node pkg="gps_publisher" type="gps_publisher" name="gps_publisher" />
  </group>
    
  <node pkg="publish_imu" type="publish_imu" name="publish_imu" output="screen"> 
    <param name="loop_rate" value="190"/>
  </node>
</launch>

