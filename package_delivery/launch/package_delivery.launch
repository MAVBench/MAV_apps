<launch>
  <arg name="host_ip" default="$(env host_ip)" />
<param name="ip_addr" value="$(arg host_ip)" />


  <!-- Drone's physical characteristics /-->
  <arg name="a_max" default="5"/> 
  <arg name="v_max" default="3"/> 
  <param name="future_col_drone_radius" value="1.5"/>
  <param name="future_col_drone_height" value="0.6"/>
  <arg name="planner_drone_radius" default="2"/>
  <arg name="planner_drone_height" default="0.6"/>
  
  <arg name="planning_resolution" default="0.1"/>
  <arg name="sensor_max_range" default="7" />
  <arg name="fly_trajectory_time_out" default=".01"/> 
  <arg name="planning_budget" default=".25"/>
  <arg name="x_dist_to_sample_from__low_bound" default="-50"/>
  <arg name="x_dist_to_sample_from__high_bound" default="100"/>
  <arg name="y_dist_to_sample_from__low_bound" default="-5"/>
  <arg name="y_dist_to_sample_from__high_bound" default="100"/>
  <comment>
  <arg name="x_dist_to_sample_from__low_bound" default="-200"/>
  <arg name="x_dist_to_sample_from__high_bound" default="200"/>
  <arg name="y_dist_to_sample_from__low_bound" default="-200"/>
  <arg name="y_dist_to_sample_from__high_bound" default="200"/>
  </comment>
  <arg name="goal_mode" default="launch_based"/>
  <arg name="goal_x" default="30"/>
  <arg name="goal_y" default="40"/>
  <arg name="goal_z" default="7"/>
  <param name="goal_mode" value="$(arg goal_mode)"/>
  <param name="goal_x" value="$(arg goal_x)"/>
  <param name="goal_y" value="$(arg goal_y)"/>
  <param name="goal_z" value="$(arg goal_z)"/>

  <arg name="noise_stddev" default="0.0"/> 

  <arg name="num_fault_col" default="0"/>  
  <!-- var_choose_col: 1, 2, 3 /-->
  <arg name="var_choose_col" default="0"/>  
  <!-- range_select_col: 1, 2, 3 /-->
  <arg name="range_select_col" default="0"/>  
  <arg name="num_sigma_col" default="4"/>


  <arg name="num_fault_multidoftraj" default="0"/>
  <!-- choose_multidoftraj: 1 ~ 10 /-->
  <arg name="var_choose_multidoftraj" default="0"/>
  <!-- range_select_multidoftraj: 1, 2, 3 /-->
  <arg name="range_select_multidoftraj" default="0"/>
  <arg name="num_sigma_multidoftraj" default="4"/>
  <!-- var_choose_drone: 1 ~ 3 /-->
  <arg name="num_fault_drone" default="0"/>  
  <arg name="var_choose_drone" default="0"/>
  <arg name="range_select_drone" default="0"/>
  <arg name="num_sigma_drone" default="4"/>

  <arg name="detect" default="0"/>
  <arg name="detect_percentage" default="1"/>
  <arg name="error_threshold" default="1000"/>
  
  <!-- injected_img_publisher: change to 0 if want fault injection /-->
  <arg name="injected_img_publisher" default="1"/>
  <!-- 0 for octomap 1 for follow_trajectory /-->
  <arg name="process_select" default="0"/>
  <arg name="rosfi_num_flips" default="0"/>
  <param name="planning_budget" value="$(arg planning_budget)"/>
  <!-- 1 for octomap, 2 for motion planner /-->
  <arg name="notify_rosfi" default="2"/>

  <comment> 
  <!-- orb slam location--> 
  <arg name="orb_slam2_dir" default="$(find ORB_SLAM2)/../../.."/> 
  </comment>
  
  <arg name="max_yaw_rate" default="90"/>
  <arg name="max_yaw_rate_during_flight" default="90"/>
  <param name="v_max" value="$(arg v_max)"/>
  <param name="a_max" value="$(arg a_max)"/>
  <param name="max_yaw_rate" value="$(arg max_yaw_rate)"/>
  <param name="max_yaw_rate_during_flight" value="$(arg max_yaw_rate_during_flight)"/>
  <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/> 

  
  <!-- sensors /-->
  <arg name="all_front" default="true"/>	

  <!-- Set the localization method /-->
  <!--arg name="localization_method" default="orb_slam2_rgbd"/-->
  <!--arg name="localization_method" default="vins_mono" /-->
  <!--arg name="localization_method" default="gps" /-->
  <arg name="localization_method" default="ground_truth" />

  <param name="localization_method" value="$(arg localization_method)" />

  <!-- stat file-->
  <param name="stats_file_addr" value="$(find package_delivery)/../data/package_delivery/stats.json" />
  <param name="supervisor_mailbox" value="$(find package_delivery)/../data/package_delivery/supervisor_mailbox.txt" />

  <!-- setting DEBUG to false prevents publishing and subscribing to rviz /--> 
  <!-- also planning to prevent stdio stuff(if they really matter)-->
  <arg name="DEBUG" default="true" />
  <arg name="CLCT_DATA" value="true" />
  <param name="ros_DEBUG" type="bool" value="$(arg DEBUG)" />
  <param name="DEBUG"  value="$(arg DEBUG)" />
  <param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>

  
  <group if="$(arg CLCT_DATA)">
  <param name="enable_statistics" value="true"/>
  </group> 

  <!-- only for to octomap and pt cloud--> 
  <arg name="data_collection_iteration_freq" value="150" />
  <param name="data_collection_iteration_freq_ptCld" value="$(eval 5*arg('data_collection_iteration_freq'))"/>


  <!-- launch prefixes -->
  <arg name="my_launch_prefix" default="" /> 
  <!-- arg name="my_launch_prefix" default="/home/nvidia/install/perf/perf record -g fp"/ -->



  <!-- starting nodes -->
  <node pkg="profile_manager" type="profile_manager" name="profile_manager" output="screen">
  <param name="stats_file_addr" value="$(find package_delivery)/../data/package_delivery/stats.json" />
  <param name="ip_addr" value="$(arg host_ip)"/>
  </node>


  <comment>
    <!-- Octomap -->
    <node pkg="nodelet" type="nodelet" name="octomap_server_nodelet" args="load octomap_server/OctomapServerNodelet depth_transforms_manager" output="screen">
	<!-- node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen"-->
        <param name="resolution" value="$(arg planning_resolution)" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg sensor_max_range)"/>
		<param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>
        <param name="data_collection_iteration_freq_OM" value="$(arg data_collection_iteration_freq)"/>
        
        <!-- data source to integrate (PointCloud2) -->
		<!-- remap from="cloud_in" to="/points" / -->

		<!-- Filter ground for binary occupancy map -->
		<param name="base_frame_id" value="world" />
		<!-- <param name="filter_ground" value="true" />
		<param name="ground_filter_plane_distance" value="1.00" />
		<param name="ground_filter/distance" value="0.50" /> -->
	    <param name="pointcloud_min_z" type="double" value="-2.0" />
	    <param name="pointcloud_max_z" type="double" value="100.0" />
	    <param name="occupancy_min_z" type="double" value="-2.00" />
	    <param name="occupancy_max_z" type="double" value="100.0" />
		<!-- <param name="ground_filter_plane_distance" value="0.07" />
		<param name="ground_filter/distance" value="0.04" />
		<param name="ground_filter/angle" value="0.4" /> -->
	</node>
  </comment>

  <comment>
	<node pkg="octomap_world" type="octomap_manager" name="octomap_manager">
       <remap from="cam0/camera_info" to="/Airsim/left/camera_info"/>
       <remap from="cam1/camera_info" to="/Airsim/right/camera_info"/>
	   <remap from="pointcloud" to="/points" />
       <remap from="disparity" to="/Airsim/disparity"/> 
       <param name="resolution" value="0.8"/>
       <!--param name="octomap_file" value=""/-->
    </node>
  </comment>


	<!-- Point-cloud publisher -->
 	<node pkg="airsim_img_publisher" type="airsim_imgPublisher" name="airsim_imgPublisher" output="screen">
    <param name="injected" value="$(arg injected_img_publisher)" />

		<!-- IP of the Airsim computer -->
		<param name="Airsim_ip" value="$(arg host_ip)" />

		<!-- Port of the Airsim computer (this is default, do not change!) -->
		<param name="Airsim_port" value="41451"/>

		<param name="loop_rate" value="25"/>
                <!-- sensor noise params -->
                <param name="noise_stddev" value="$(arg noise_stddev)"/> 

		<!-- RGB camera parameters (parameters when calibrated) -->
	    <param name="all_front" value="$(arg all_front)"/>	
        <param name="Fx" value="256"/>
		<param name="Fy" value="256"/>
		<param name="cx" value="256"/>
		<param name="cy" value="144"/>
		<param name="scale_x" value="512"/>  <!-- Width when calibrated!-->
		<param name="scale_y" value="288"/> <!-- Height when calibrated!-->

		<!-- Depth baseline -->
		<param name="Tx" value="0.14"/> 
		<param name="scale" value="0.38"/> 

        <!-- Localization of the depth images -->
        <param name="localization_method" value="$(arg localization_method)" />
	</node>



	<!-- Nodelet manager for this pipeline -->
    <node pkg="nodelet" type="nodelet" args="manager" name="depth_transforms_manager" output="screen">
        <!-- remap from="/points" to="/cloud_in" / -->
    </node>

	<!-- Convert to point cloud -->
	<node pkg="nodelet" type="nodelet" name="cloudify"
	args="load depth_image_proc/point_cloud_xyz depth_transforms_manager --no-bond" output="screen">

		<!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
		<remap from="rgb/camera_info" to="/Airsim/camera_info"/> 
		<!-- Input: Rectified depth image -->
		<remap from="image_rect" to="/Airsim/depth_front"/>

    </node>
    
    <comment> 
    <node pkg="package_delivery" type="panic_pcl" name="panic_pcl" output="screen">
		<param name="panic_distance" value=".1"/>
    </node>
    </comment>
    
    <!-- node pkg="package_delivery" type="future_collision" name="future_collision" output="screen" -->
	<!-- node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen"-->
    <!-- group ns="occupancy_map_node" -->
    <node pkg="package_delivery" type="occupancy_map_node" name="occupancy_map_node" output="screen">
        <param name="resolution" value="$(arg planning_resolution)" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg sensor_max_range)"/>
		<param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>
        <param name="data_collection_iteration_freq_OM" value="$(arg data_collection_iteration_freq)"/>
        
        <!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/points" />

		<!-- Filter ground for binary occupancy map -->
		<param name="base_frame_id" value="world" />
		<!-- <param name="filter_ground" value="true" />
		<param name="ground_filter_plane_distance" value="1.00" />
		<param name="ground_filter/distance" value="0.50" /> -->
	    <param name="pointcloud_min_z" type="double" value="-2.0" />
	    <param name="pointcloud_max_z" type="double" value="100.0" />
	    <param name="occupancy_min_z" type="double" value="-2.00" />
	    <param name="occupancy_max_z" type="double" value="100.0" />
		<!-- <param name="ground_filter_plane_distance" value="0.07" />
		<param name="ground_filter/distance" value="0.04" />
		<param name="ground_filter/angle" value="0.4" /> -->

        <param name="latch" value="false" />
    </node>
    <!-- /group -->
    
    <?ignore 
    <!-- Convert to point cloud -->
	<node pkg="package_delivery" type="panic" name="panic">
		<remap from="depth_img" to="/Airsim/depth_2"/>
		<!-- remap from="depth_img" to="/stereo/left/image_raw"/ -->
    </node>
    ?>

    <node pkg="follow_trajectory" type="follow_trajectory" name="follow_trajectory" output="screen">
        <!-- param name="yaw_t" value=".75"/ -->
        <param name="ip_addr" value="$(arg host_ip)"/>
        <param name="localization_method" type="string" value="$(arg localization_method)"/>
        <param name="grace_period" type="double" value="0.0" />
        <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/>
        <!-- sensor noise params -->
        <param name="num_fault" value="$(arg num_fault_col)"/> 
        <param name="var_choose_col" value="$(arg var_choose_col)"/>
        <param name="range_select_col" value="$(arg range_select_col)"/>
        <param name="num_sigma_col" value="$(arg num_sigma_col)"/>
        <param name="detect" value="$(arg detect)"/>
        <param name="detect_percentage" value="$(arg detect_percentage)"/>
        <param name="error_threshold" value="$(arg error_threshold)"/>
        <!-- sensor noise params -->
        <param name="num_fault_drone" value="$(arg num_fault_drone)"/> 
        <param name="var_choose_drone" value="$(arg var_choose_drone)"/>
        <param name="range_select_drone" value="$(arg range_select_drone)"/>
        <param name="num_sigma_drone" value="$(arg num_sigma_drone)"/>
    </node>

    <node pkg="ROSFI" type="ROSFI" name="ROSFI" output="screen">
        <param name="process_select" value="$(arg process_select)"/>
        <param name="num_flips" value="$(arg rosfi_num_flips)"/>
    </node>


	<!-- Path-Planner -->
	<!-- node pkg="package_delivery" type="motion_planner" name="motion_planner" output="screen" launch-prefix="$(arg my_launch_prefix)" -->
	<group ns="motion_planner">
		<param name="nodes_to_add_to_roadmap" value="300"/>
		<param name="max_dist_to_connect_at" value="10"/>

		<param name="v_max" value="$(arg v_max)"/>
		<param name="a_max" value="$(arg a_max)"/>
        <param name="drone_radius" value="$(arg planner_drone_radius)"/>
        <param name="drone_height" value="$(arg planner_drone_height)"/>

		<param name="max_roadmap_size" value="1600"/>

        <param name="rrt_step_size" value="1.0"/>
        <param name="rrt_bias" value="10"/>
		
        <param name="x_dist_to_sample_from__low_bound" value="$(arg x_dist_to_sample_from__low_bound)"/>
   <param name="x_dist_to_sample_from__high_bound" value="$(arg x_dist_to_sample_from__high_bound)"/>
   <param name="y_dist_to_sample_from__low_bound" value="$(arg y_dist_to_sample_from__low_bound)"/>
   <param name="y_dist_to_sample_from__high_bound" value="$(arg y_dist_to_sample_from__high_bound)"/>

        <param name="z_dist_to_sample_from__low_bound" value="1"/>
        <param name="z_dist_to_sample_from__high_bound" value="10"/>

        <param name="sampling_interval" value="0.5"/>

        <!-- sensor noise params -->
        <param name="num_fault" value="$(arg num_fault_multidoftraj)"/> 
        <param name="var_choose_multidoftraj" value="$(arg var_choose_multidoftraj)"/>
        <param name="range_select_multidoftraj" value="$(arg range_select_multidoftraj)"/>
        <param name="num_sigma_multidoftraj" value="$(arg num_sigma_multidoftraj)"/>
        <param name="detect" value="$(arg detect)"/>
        <param name="detect_percentage" value="$(arg detect_percentage)"/>
        <param name="notify_rosfi" value="$(arg notify_rosfi)"/>

        <!-- options for motion_planning core --> 
        <!--param name="motion_planning_core" value="OMPL-PRM"/-->
        <!-- param name="motion_planning_core" value="RRT"/-->
        <!-- param name="motion_planning_core" value="OMPL-RRT"/-->
        <!-- param name="motion_planning_core" value="OMPL-RRTConnect"/-->
        <param name="motion_planning_core" value="OMPL-RRTStar"/>
	<!-- /node -->
    </group>

	<!-- Demo program that controls drone -->
	<!-- <node pkg="package_delivery" type="package_delivery" name="package_delivery" output="screen" launch-prefix="/home/nvidia/install/perf/perf record -g fp"> -->
	<node  pkg="package_delivery" type="package_delivery" name="package_delivery" output="screen">
        <param name="ip_addr" value="$(arg host_ip)"/>
        <!-- param name="issue_cmd__time_step" value=".05"/-->
		<!-- param name="points_to_replan_after" value="1000000000"/-->
        <param name="v_max" value="$(arg v_max)"/>
		<param name="a_max" value="$(arg a_max)"/>
        <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/>
        <!-- Localization of the depth images -->
        <param name="localization_method" value="$(arg localization_method)" />
    </node>

    <comment>
	<group if="$(eval localization_method == 'orb_slam2_rgbd')">
        <node pkg="ORB_SLAM2" type="RGBD" name="RGBD" args="$(arg orb_slam2_dir)/Vocabulary/ORBvoc.txt $(arg orb_slam2_dir)/cameras/airsim-rgbd.yaml /camera/rgb/image_raw:=/Airsim/right/image_raw /camera/depth_registered/sw_registered/image_rect:=/Airsim/depth" output="screen"/>
	</group>
    </comment>
  <group if="$(eval localization_method == 'vins_mono')">
      <node pkg="timed_roslaunch" type="timed_roslaunch.sh" args="4 vins_estimator airsim.launch" name="timed_roslaunch" />
  </group>

  <group if="$(eval localization_method == 'gps')">
     <node pkg="gps_publisher" type="gps_publisher" name="gps_publisher" />
  </group>
    
    <!-- rviz -->
	<group if="$(arg DEBUG)">
	<node pkg="rviz" type="rviz" name="rviz" args="-d $(find package_delivery)/extras/rvizConfig.rviz"/>
    </group>

  <node pkg="publish_imu" type="publish_imu" name="publish_imu" output="screen"> 
    <param name="loop_rate" value="190"/>
  </node>
</launch>

