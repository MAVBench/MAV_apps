<launch>

  <!-- ===================================================================== -->
  <!-- ========================== Hardware in the Loop====================== -->
  <!-- ===================================================================== -->
  <!-- args and params --> 
  <!-- Behzad's workstation ip --> 
  <!-- arg name="host_ip" default="10.157.90.51" /-->
  <!--arg name="host_ip" default="169.254.153.158" /-->
  <!-- Hasans's workstation ip --> 
  <!-- arg name="host_ip" default="10.157.90.49" /-->
  <!-- Hasans's direct connection ip --> 
  <!-- arg name="host_ip" default="169.254.250.191" /-->
  <!--Wenzhi's workstation ip-->
  <!--arg name="host_ip" default="10.157.90.62" /-->
  <!-- Sri's workstation ip --> 
  <!--arg name="host_ip" default="10.157.90.132" /-->
  <arg name="host_ip" default="$(env host_ip)" />
  <param name="ip_addr" value="$(arg host_ip)" />

 
  <!-- ===================================================================== -->
  <!-- ========================Sensors/Actuators============================ -->
  <!-- ===================================================================== -->
  <!-- Drone's physical characteristics, actuators and sensors /-->
  <!-- actuators --> 
  <arg name="a_max" default="4"/> 
  <arg name="v_max" default="5.5"/> 
  <param name="future_col_drone_radius" value="1.5"/>
  <param name="future_col_drone_height" value="0.75"/>
  <arg name="planner_drone_radius" default="3"/>
  <arg name="planner_drone_height" default="1.2"/>
  <arg name="max_yaw_rate" default="90"/>
  <arg name="max_yaw_rate_during_flight" default="90"/>
  <param name="v_max" value="$(arg v_max)"/>
  <param name="v_max_max" value="$(arg v_max)"/>
  <param name="v_max_min" value="1.5"/>
  <param name="a_max" value="$(arg a_max)"/>
  <param name="max_yaw_rate" value="$(arg max_yaw_rate)"/>
  <param name="max_yaw_rate_during_flight" value="$(arg max_yaw_rate_during_flight)"/>
  <param name="planner_drone_radius" value="$(arg planner_drone_radius)"/>
  <arg name="planner_drone_radius_when_hovering" default=".75"/>
  <param name="planner_drone_radius_when_hovering" value="$(arg planner_drone_radius_when_hovering)"/>




  <!-- sensor information --> 
  <arg name="all_front" default="false"/>	
  <arg name="sphere_view" default="true"/>	
  <!-- Set the localization method /-->
  <!--arg name="localization_method" default="orb_slam2_rgbd"/-->
  <!--arg name="localization_method" default="vins_mono" /-->
  <!--arg name="localization_method" default="gps" /-->
  <arg name="localization_method" default="ground_truth" />
  <param name="localization_method" value="$(arg localization_method)" />

  
  <arg name="capture_size" default="600" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="capture_size" value="$(arg capture_size)"/> 
  
  
  <!-- ===================================================================== -->
  <!-- ========================= Performance Modeling ============================ -->
  <!-- ===================================================================== -->
  <arg name="knob_performance_modeling" default="false" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="knob_performance_modeling" value="$(arg knob_performance_modeling)"/> 
  <arg name="knob_performance_modeling_for_pc_om" default="false" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="knob_performance_modeling_for_pc_om" value="$(arg knob_performance_modeling_for_pc_om)"/> 
  <arg name="point_cloud_num_points_step_size" default="3000" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="point_cloud_num_points_step_size" value="$(arg point_cloud_num_points_step_size)"/> 
  <arg name="knob_performance_modeling_for_om_to_pl" default="false" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="knob_performance_modeling_for_om_to_pl" value="$(arg knob_performance_modeling_for_om_to_pl)"/> 
  <arg name="knob_performance_modeling_for_om_to_pl_no_interference" default="false" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="knob_performance_modeling_for_om_to_pl_no_interference" value="$(arg knob_performance_modeling_for_om_to_pl_no_interference)"/> 
  <arg name="knob_performance_modeling_for_piecewise_planner" default="false" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="knob_performance_modeling_for_piecewise_planner" value="$(arg knob_performance_modeling_for_piecewise_planner)"/> 
  <arg name="map_to_transfer_side_length_step_size" default="30" /> <!-- determines the sampling size, can be usefully to set it to 1, when we want to look at every value -->
  <param name="map_to_transfer_side_length_step_size" value="$(arg map_to_transfer_side_length_step_size)"/> 
 
  <!-- ===================================================================== -->
  <!-- ============================Run Time================================= -->
  <!-- ===================================================================== -->
  <!-- Run time/resource allocation --> 
  <!-- follow trajector --> 
  <!-- used in follow trajectory for slicing the way points generated by smoothener -->
  <!-- should be less than sampling_time -->
  
  <arg name="sensor_max_range" default="25" />
  <arg name="sampling_interval" default=".2"/> 
  <param name="sampling_interval" value="$(arg sampling_interval)"/>
  <!-- arg name="sensor_to_actuation_time_budget_to_enforce" default="3"/--> 
  <arg name="max_time_budget" default="15" />   
  <param name="max_time_budget" value="$(arg max_time_budget)"/>
  <param name="sensor_to_actuation_time_budget_to_enforce" value="$(arg max_time_budget)"/>
  <arg name="velocity_to_budget_on" default=".1"/> 
  <param name="velocity_to_budget_on" value="$(arg velocity_to_budget_on)"/>
  <arg name="planner_min_freq" default=".0001"/> 
  <arg name="planner_max_freq" default="10"/>   <!-- currently not used -->
  <arg name="distance_to_goal_margin" default="20"/> 
  <param name="distance_to_goal_margin" value="$(arg distance_to_goal_margin)"/>
  <param name="dist_to_closest_obs_calc_from_octomap" value="$(arg sensor_max_range)"/>


  
  <comment> 
  <!-- orb slam location--> 
  <arg name="orb_slam2_dir" default="$(find ORB_SLAM2)/../../.."/> 
  </comment>

  <!-- ===================================================================== -->
  <!-- ===========================Profiling ================================ -->
  <!-- ===================================================================== -->
  <!-- profiling params --> 
  <arg name="DEBUG_RQT" default="true" /> <!-- determines whether to use RQT for debugging or not -->
  <param name="DEBUG_RQT" value="$(arg DEBUG_RQT)"/> 

  <arg name="DEBUG_VIS" default="true" /> <!-- determines whether to use RQT for debugging or not -->
  <param name="DEBUG_VIS" value="$(arg DEBUG_VIS)"/> 

  <arg name="SPACE_PROFILING" default="true" /> <!-- determines whether to use RQT for debugging or not -->
  <param name="SPACE_PROFILING" value="$(arg SPACE_PROFILING)"/> 


  <arg name="measure_time_end_to_end" default="true" />
  <param name="measure_time_end_to_end" value="$(arg measure_time_end_to_end)"/> 

  <param name="stats_file_addr" value="$(find package_delivery)/../data/package_delivery/stats.json" />
  <param name="supervisor_mailbox" value="$(find package_delivery)/../data/package_delivery/supervisor_mailbox.txt" />
  <!-- setting DEBUG to false prevents publishing and subscribing to rviz /--> 
  <!-- also planning to prevent stdio stuff(if they really matter)-->
  <arg name="DEBUG" default="true" />
  <arg name="CLCT_DATA" value="true" />
  <arg name="micro_benchmark" value="false" />
  <arg name="micro_benchmark_number" value="1" />
  <param name="DEBUG"  value="$(arg DEBUG)" />
  <param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>
  <param name="ros_DEBUG" type="bool" value="$(arg DEBUG)" />
  <group if="$(arg CLCT_DATA)">
  <param name="enable_statistics" value="true"/>
  <!--param name="statistics_window_min_size" value="10"/-->
  <!--param name="statistics_window_max_size" value="40"/-->
  <!--param name="statistics_window_min_elements" value="10000"/-->
  <!--param name="statistics_window_max_elements" value="100000"/-->
  </group> 
  <!-- only for to octomap and pt cloud--> 
  <arg name="data_collection_iteration_freq" value="150" />  <!-- how often collect data in point cloud -->
  <param name="data_collection_iteration_freq_ptCld" value="$(eval 5*arg('data_collection_iteration_freq'))"/>

  <!-- ===================================================================== -->
  <!-- =========================Micro Benchmarking========================== -->
  <!-- ===================================================================== -->
  <!-- micro benchmarking -->
  <param name="micro_benchmark" type="bool" value="$(arg micro_benchmark)" />
  <param name="micro_benchmark_number" value="$(arg micro_benchmark_number)" />
    
  
  <!-- launch prefixes -->
  <arg name="my_launch_prefix" default="" /> 
  <!-- arg name="my_launch_prefix" default="/home/nvidia/install/perf/perf record -g fp"/ -->


  
  <!-- ===================================================================== -->
  <!-- ========================== Nodes ==================================== -->
  <!-- ===================================================================== -->
    <!-- controller --> 
  <!-- PID controller parames /--> 
  <comment>  
  <!-- working with the regular controller --> 
  <param name="p_vx" value="3.0"/>
  <param name="p_vy" value="3.0"/>
  <param name="p_vz" value="3.0"/>
  <param name="I_px" value=".0"/>
  <param name="I_py" value=".0"/>
  <param name="I_pz" value=".0"/>
  <param name="d_px" value="0"/>
  <param name="d_py" value="0"/>
  <param name="d_pz" value="0"/>
  <param name="PID_correction_time" value="3"/>
  <param name="follow_trajectory_loop_rate" value="$(arg follow_trajectory_loop_rate)"/>
  </comment>

  <comment> 
  <param name="p_vx" value="0"/>
  <param name="p_vy" value="0"/>
  <param name="p_vz" value="0"/>
  <param name="I_px" value=".0"/>
  <param name="I_py" value=".0"/>
  <param name="I_pz" value=".0"/>
  <param name="d_px" value="-.5"/>
  <param name="d_py" value="-.5"/>
  <param name="d_pz" value="-.5"/>
  <param name="PID_correction_time" value="3"/>
  <param name="follow_trajectory_loop_rate" value="$(arg follow_trajectory_loop_rate)"/>
  </comment>

 
  <param name="num_cameras" value="6"/>

  <!-- ========================= Sensors ============================ -->
  <node pkg="airsim_img_publisher" type="airsim_imgPublisher" name="airsim_imgPublisher" output="screen">
      <!-- IP of the Airsim computer -->
      <param name="Airsim_ip" value="$(arg host_ip)" />
      <!-- Port of the Airsim computer (this is default, do not change!) -->
      <param name="Airsim_port" value="41451"/>
      <param name="loop_rate" value="60"/>

      <!-- RGB camera parameters (parameters when calibrated) -->
      <param name="all_front" value="$(arg all_front)"/>	
      <param name="sphere_view" value="$(arg sphere_view)"/>	
      <param name="Fx" value="256"/>
      <param name="Fy" value="256"/>
      <param name="cx" value="256"/>
      <param name="cy" value="144"/>
      <param name="scale_x" value="512"/>  <!-- Width when calibrated!-->
      <param name="scale_y" value="288"/> <!-- Height when calibrated!-->

      <!-- Depth baseline -->
      <param name="Tx" value="0.14"/> 
      <param name="scale" value="0.38"/> 

      <!-- Localization of the depth images -->
      <param name="localization_method" value="$(arg localization_method)" />
  </node>

  <node pkg="publish_imu" type="publish_imu" name="publish_imu" output="screen"> 
      <param name="loop_rate" value="190"/>
  </node>


  <!-- ========================= Run Time ()  ============================ -->
  <arg name="reactive_runtime" default="true" />   
  <arg name="budgetting_mode" default="manual" />    
  <param name="reactive_runtime" value="$(arg reactive_runtime)"/>
  <param name="budgetting_mode" value="$(arg budgetting_mode)"/>
  <arg name="gap_statistic_mode" default="avg" />   
  <arg name="use_pyrun" default="true" />   
  <param name="use_pyrun" value="$(arg use_pyrun)"/>
  <param name="gap_statistic_mode" value="$(arg gap_statistic_mode)"/>
    <arg name="cur_tree_total_volume" default="8000" />   
  <param name="cur_tree_total_volume" value="$(arg cur_tree_total_volume)"/>
  <arg name="ppl_vol_min_coeff" default="100" />   
  <param name="ppl_vol_min_coeff" value="$(arg ppl_vol_min_coeff)"/>
  <arg name="ppl_time_budget" default="5" />   
  <param name="ppl_time_budget" value="$(arg ppl_time_budget)"/>
  <arg name="smoothening_budget" default="5" />   
  <param name="smoothening_budget" value="$(arg smoothening_budget)"/>

  <!-- fixed knob values --> 
 <arg name="pc_res_max" default=".3" />   
 <param name="pc_res_max" value="$(arg pc_res_max)"/>
 <arg name="pc_res_steps" default="5" />   
 <param name="pc_res_steps" value="$(arg pc_res_steps)"/>
 <arg name="num_of_res_to_try" default="4" />   
 <param name="num_of_res_to_try" value="$(arg num_of_res_to_try)"/>
 <arg name="pc_vol_ideal_min" default="2900" />   
 <param name="pc_vol_ideal_min" value="$(arg pc_vol_ideal_min)"/>
 <arg name="pc_vol_ideal_max" default="50000" />   
 <param name="pc_vol_ideal_max" value="$(arg pc_vol_ideal_max)"/>
 <arg name="om_to_pl_vol_ideal_max" default="5000000" />   
 <param name="om_to_pl_vol_ideal_max" value="$(arg om_to_pl_vol_ideal_max)"/>
 <arg name="ppl_vol_ideal_max" default="8000000" />   
 <param name="ppl_vol_ideal_max" value="$(arg ppl_vol_ideal_max)"/>
 <!--arg name="pc_res" default=".3" /-->   
  <param name="pc_res" value="$(arg pc_res_max)"/>
  <param name="pc_res_delete_later" value="$(arg pc_res_max)"/>
  <!-- arg name="om_to_pl_res" default="" /-->   
  <param name="om_to_pl_res" value="$(arg pc_res_max)"/>
  <!--arg name="pc_vol_ideal" default="80000" /-->   
  <param name="pc_vol_ideal" value="$(arg pc_vol_ideal_max)"/>
  <!-- arg name="om_to_pl_vol_ideal" default= /-->   
  <param name="om_to_pl_vol_ideal" value="$(arg om_to_pl_vol_ideal_max)"/>
  <!--arg name="ppl_vol_ideal" default="600000" /-->   
  <param name="ppl_vol_ideal" value="$(arg ppl_vol_ideal_max)"/>

  <arg name="expected_latency" default=".05" />   
  <arg name="om_latency_expected" default=".05" />   
  <param name="om_latency_expected" value="$(arg om_latency_expected)"/>
  
  <arg name="om_to_pl_latency_expected" default=".05" />   
  <param name="om_to_pl_latency_expected" value="$(arg om_to_pl_latency_expected)"/>
  <param name="ee_latency_expected" value="$(arg expected_latency)"/>

  <param name="x_coord_while_budgetting" value="0"/>
  <param name="y_coord_while_budgetting" value="0"/>
  <param name="vel_mag_while_budgetting" value="0"/>

  
  <!-- param name="ppl_latency_expected" value="$(arg expected_latency)"/-->
  <!-- param name="smoothening_latency_expected" value="$(arg expected_budgets)"/-->
 <!-- ========================= Performance Modeling ()  ============================ -->
   <node pkg="run_time" type="run_time_thread" name="run_time_thread" output="screen"/>
  <node pkg="run_time" type="optimizer_node.py" name="optimizer_node" output="screen">
    <param name="dummy_val" value="2.0" />
    <param name="rate" value="5" />
  </node>
  



  <!-- =========================Point Cloud  ============================ -->
  <arg name="point_cloud_shard_cnt" default="1"/>
  <arg name="point_cloud_num_points" default="3000000"/>
  <arg name="point_cloud_num_points_filtering_mode" default="radius"/>
  <arg name="point_cloud_width" default="50"/>
  <arg name="point_cloud_height" default="50"/>
  <arg name="point_cloud_density_reduction" default="1"/> <!-- 1 means no density reduction. Higher means more reduction -->
  <!--arg name="om_res" default=".15"/--> <!-- OM voxels size-->
  <arg name="point_cloud_max_z" default="400.0" />

  <param name="point_cloud_max_z" value="$(arg point_cloud_max_z)" />
  <param name="point_cloud_shard_cnt" value="$(arg point_cloud_shard_cnt)" />
  <param name="point_cloud_num_points" value="$(arg point_cloud_num_points)" />
  <param name="point_cloud_num_points_filtering_mode" value="$(arg point_cloud_num_points_filtering_mode)" />
  <param name="point_cloud_width" value="$(arg point_cloud_width)"/>
  <param name="point_cloud_height" value="$(arg point_cloud_height)"/>
  <param name="point_cloud_density_reduction" value="$(arg point_cloud_density_reduction)"/>

    <!-- Nodelet manager for this pipeline -->
    <node pkg="nodelet" type="nodelet" args="manager" name="depth_transforms_manager" output="screen">
        <!-- remap from="/points" to="/cloud_in" / -->
    </node>

	<!-- Convert to point cloud -->
	<node pkg="nodelet" type="nodelet" name="cloudify"
	args="load depth_image_proc/point_cloud_xyz depth_transforms_manager --no-bond" output="screen">

		<!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
		<remap from="rgb/camera_info" to="/Airsim/camera_info"/> 
    </node>

    <comment>
    <node pkg="nodelet" type="nodelet" args="manager" name="depth_transforms_manager_2" output="screen">
        <!-- remap from="/points" to="/cloud_in" / -->
    </node>

	<node pkg="nodelet" type="nodelet" name="cloudify_2"
 	args="load depth_image_proc/point_cloud_xyz depth_transforms_manager_2 --no-bond" output="screen">

		<!-- Input: Camera calibration and metadata.  (sensor_msgs/CameraInfo) -->
		<remap from="rgb/camera_info" to="/Airsim/camera_info"/> 
		<!-- Input: Rectified depth image -->
		<remap from="image_rect" to="/Airsim/depth_back"/>
		<remap from="points" to="/points_back"/>
    </node>
    </comment>
    
    <comment> 
    <node pkg="package_delivery" type="panic_pcl" name="panic_pcl" output="screen">
		<param name="panic_distance" value=".1"/>
    </node>
    </comment>
    

  <!-- ========================= Octomap (Occupancy Map)============================ -->
  <arg name="octomap_lower_resolution_volume_width" default="20" />
  <arg name="octomap_lower_resolution_volume_height" default="20" />
  <arg name="octomap_lower_resolution_volume_length" default="20" />
  <arg name="filterOctoMap" default="true" /> 
  <arg name="MapToTransferSideLength" default="30" /> 

  <arg name="gridSliceCountPerSide" default="2" />
  <arg name="gridMode" default="3d" />
  <arg name="voxel_type_to_publish" default="occupied" />
 
  <param name="voxel_type_to_publish" value="$(arg voxel_type_to_publish)" />
  <param name="occupancy_max_z" value="$(arg point_cloud_max_z)" />
  <param name="om_res" value=".15" />
  <param name="lower_resolution_relative_volume_width" value="$(arg octomap_lower_resolution_volume_width)" />
  <param name="lower_resolution_relative_volume_height" value="$(arg octomap_lower_resolution_volume_height)" />
  <param name="lower_resolution_relative_volume_length" value="$(arg octomap_lower_resolution_volume_length)" /> 
  <param name="gridMode" value="$(arg gridMode)" /> 
  <param name="MapToTransferSideLength" value="$(arg MapToTransferSideLength)" /> 
  <param name="filterOctoMap" value="$(arg filterOctoMap)" /> 
  <param name="gridSliceCountPerSide" value="$(arg gridSliceCountPerSide)" /> 

  <param name="sensor_max_range" value="$(arg sensor_max_range)"/>
  <!-- node pkg="package_delivery" type="future_collision" name="future_collision" output="screen" -->
  <!-- node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen"-->
  <!-- group ns="occupancy_map_node" -->
   
  <node pkg="package_delivery" type="occupancy_map_node" name="occupancy_map_node" output="screen">
	<param name="capture_size" value="$(arg capture_size)"/>
    <!--param name="map_file" type="string" value="/home/reddi-rtx/Downloads/octomap_base.ot" /-->
        <param name="DEBUG_RQT" value="$(arg DEBUG_RQT)"/> 
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="world" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="$(arg sensor_max_range)"/>
        <param name="measure_time_end_to_end" value="$(arg measure_time_end_to_end)"/>
        <param name="CLCT_DATA" value="$(arg CLCT_DATA)"/>
        <param name="data_collection_iteration_freq_OM" value="$(arg data_collection_iteration_freq)"/>
        
        <!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/points_aug" />

		<!-- Filter ground for binary occupancy map -->
		<param name="base_frame_id" value="world" />
		<!-- <param name="filter_ground" value="true" />
		<param name="ground_filter_plane_distance" value="1.00" />
		<param name="ground_filter/distance" value="0.50" /> -->
	    <param name="pointcloud_min_z" type="double" value="-2.0" />
	    <param name="pointcloud_max_z" type="double" value="$(arg point_cloud_max_z)" />
	    <param name="occupancy_min_z" type="double" value="-2.00" />
	    <param name="occupancy_max_z" type="double" value="$(arg point_cloud_max_z)" />
		<!-- <param name="ground_filter_plane_distance" value="0.07" />
		<param name="ground_filter/distance" value="0.04" />
		<param name="ground_filter/angle" value="0.4" /> -->

        <param name="latch" value="false" />
    </node>
    <!-- /group -->
    
    <?ignore 
    <!-- Convert to point cloud -->
	<node pkg="package_delivery" type="panic" name="panic">
		<remap from="depth_img" to="/Airsim/depth_2"/>
		<!-- remap from="depth_img" to="/stereo/left/image_raw"/ -->
    </node>
    ?>

  <!-- ========================= Path Planner (Planning)============================ -->
  <arg name="ppl_latency_expected" default="7"/>
  <arg name="smoothening_latency_expected" default="7"/>

  <param name="ppl_latency_expected" value="$(arg ppl_latency_expected)"/>
  <param name="smoothening_latency_expected" value="$(arg smoothening_latency_expected)"/>
  <!--group ns="motion_planner"-->
  <node pkg="package_delivery" type="motion_planner_node" name="motion_planner" output="screen" launch-prefix="$(arg my_launch_prefix)">
    <param name="trav_dis_before_replanning" value="1"/>
    <param name="planner_min_freq" value="$(arg planner_min_freq)"/>
    <param name="planner_max_freq" value="$(arg planner_max_freq)"/>
    <param name="measure_time_end_to_end" value="$(arg measure_time_end_to_end)"/>
    <!-- param name="always_randomize_end_point" type="bool" value="$(arg micro_benchmark)"/-->
    <param name="always_randomize_end_point" type="bool" value="false"/>
    <param name="nodes_to_add_to_roadmap" value="800"/>
    <param name="max_dist_to_connect_at" value="10"/>

    <param name="v_max" value="$(arg v_max)"/>
    <param name="a_max" value="$(arg a_max)"/>
    <param name="drone_height" value="$(arg planner_drone_height)"/>
    <param name="drone_radius" value="$(arg planner_drone_radius)"/>

    <param name="max_roadmap_size" value="1600"/>

    <param name="rrt_step_size" value="1.0"/>
    <param name="rrt_bias" value="10"/>

    <param name="x_dist_to_sample_from__low_bound" value="-600"/>
    <param name="x_dist_to_sample_from__high_bound" value="600"/>
    <param name="y_dist_to_sample_from__low_bound" value="-800"/>
    <param name="y_dist_to_sample_from__high_bound" value="800"/>
    <param name="z_dist_to_sample_from__low_bound" value="0"/>
    <param name="z_dist_to_sample_from__high_bound" value="150"/>

    <!-- options for motion_planning core --> 
    <!-- param name="motion_planning_core" value="PRM"/-->
    <!--param name="motion_planning_core" value="RRT"/-->
    <!-- param name="motion_planning_core" value="OMPL-RRT"/-->
    <param name="motion_planning_core" value="OMPL-RRTStar"/>
    <!-- param name="motion_planning_core" value="OMPL-RRT"/-->
  </node>
    
  <comment> 
    <!--/group-->
   <node pkg="package_delivery" type="motion_planner_node" name="motion_planner_1" output="screen" launch-prefix="$(arg my_launch_prefix)"/>
    <node pkg="package_delivery" type="motion_planner_node" name="motion_planner_2" output="screen" launch-prefix="$(arg my_launch_prefix)"/>
    <node pkg="package_delivery" type="motion_planner_node" name="motion_planner_3" output="screen" launch-prefix="$(arg my_launch_prefix)"/>
  </comment>
    
    
  <!-- ========================= Follow Trajectory (Control)============================ -->
  
  <arg name="stay_in_place_duration_for_reverse" default="20"/>
  <arg name="backup_duration" default=".5"/>
  <arg name="fly_trajectory_time_out" default=".2"/> 
  <arg name="follow_trajectory_loop_rate" default="20"/>   <!-- in Hz-->
  <arg name="stay_in_place_duration_for_stop" default="5"/>
  <param name="p_vx" value="2"/>
  <param name="p_vy" value="2"/>
  <param name="p_vz" value="2"/>
  <param name="I_px" value=".01"/>
  <param name="I_py" value=".01"/>
  <param name="I_pz" value="0.0"/>
  <param name="d_px" value="1"/>
  <param name="d_py" value="1"/>
  <param name="d_pz" value="1"/>
  <param name="PID_correction_time" value="3"/>
  <param name="follow_trajectory_loop_rate" value="$(arg follow_trajectory_loop_rate)"/>

 <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/> 
  <param name="backup_duration" value="$(arg backup_duration)"/>
  <param name="stay_in_place_duration_for_stop" value="$(arg stay_in_place_duration_for_stop)"/>
  <param name="stay_in_place_duration_for_reverse" value="$(arg stay_in_place_duration_for_reverse)"/>
  <param name="follow_trajectory/grace_period" type="double" value="0.0" />
  <node pkg="follow_trajectory" type="follow_trajectory" name="follow_trajectory" output="screen">
        <param name="ip_addr" value="$(arg host_ip)"/>
        <!-- param name="yaw_t" value=".75"/ -->
        <param name="localization_method" type="string" value="$(arg localization_method)"/>
        <param name="grace_period" type="double" value="0.0" />
        <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/>
  </node>
	
  
  <!-- ========================= package delivery (top)============================ -->
  <!-- Demo program that controls drone -->
  <!-- <node pkg="package_delivery" type="package_delivery" name="package_delivery" output="screen" launch-prefix="/home/nvidia/install/perf/perf record -g fp"> -->
  <node pkg="package_delivery" type="package_delivery" name="package_delivery" output="screen">
    <param name="ip_addr" value="$(arg host_ip)"/>
    <!-- param name="issue_cmd__time_step" value=".05"/-->
    <!-- param name="points_to_replan_after" value="1000000000"/-->
    <param name="v_max" value="$(arg v_max)"/>
    <param name="a_max" value="$(arg a_max)"/>
    <param name="fly_trajectory_time_out" value="$(arg fly_trajectory_time_out)"/>
    <!-- Localization of the depth images -->
    <param name="localization_method" value="$(arg localization_method)" />
 </node>

  <comment>
  <group if="$(eval localization_method == 'orb_slam2_rgbd')">
        <node pkg="ORB_SLAM2" type="RGBD" name="RGBD" args="$(arg orb_slam2_dir)/Vocabulary/ORBvoc.txt $(arg orb_slam2_dir)/cameras/airsim-rgbd.yaml /camera/rgb/image_raw:=/Airsim/right/image_raw /camera/depth_registered/sw_registered/image_rect:=/Airsim/depth" output="screen"/>
	</group>
    </comment>
  <group if="$(eval localization_method == 'vins_mono')">
      <node pkg="timed_roslaunch" type="timed_roslaunch.sh" args="4 vins_estimator airsim.launch" name="timed_roslaunch" />
  </group>

  <group if="$(eval localization_method == 'gps')">
     <node pkg="gps_publisher" type="gps_publisher" name="gps_publisher" />
  </group>

    <!-- ========================= Profiler (Profiling)  ============================ -->
  <!-- node pkg="control_drone" type="probe_thread" name="probe_thread" output="screen"/-->

  <node pkg="profile_manager" type="profile_manager_node" name="profile_manager" output="screen">
  <param name="stats_file_addr" value="$(find package_delivery)/../data/package_delivery/stats.json" />
  <param name="ip_addr" value="$(arg host_ip)"/>
  </node>

  <!-- rviz -->
   <group if="$(arg DEBUG)">
   <node pkg="rviz" type="rviz" name="rviz" args="-d $(find package_delivery)/extras/rvizConfig.rviz"/>
   </group>

    
   <group if="$(arg DEBUG_RQT)">
   <node pkg="rqt_plot" type="rqt_plot" name="rqt_plot" />
   </group>


</launch>

